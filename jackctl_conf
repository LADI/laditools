#!/usr/bin/env python

# pyjackctl - The python jackdbus controller suite
# jackctl_logview - A log viewer for the python JACK dbus suite
# Copyright (C) 2007-2008, Marc-Olivier Barre and Nedko Arnaudov.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import pygtk
pygtk.require('2.0')
import gtk
import gtk.glade
import pyjackctl

class jackctl_conf(gtk.glade.XML):
    def __init__(self):
        # Dbus interface
        self.jack = pyjackctl.jack_configure()
        # Load the glade file
        gtk.glade.XML.__init__(self, "/usr/share/pyjackctl/data/jackctl_conf_ui.glade")
        # Get the ui ready for action
        self.event_dict = {"on_jackctl_conf_ui_destroy" : self.on_quit,
            "on_close_button_clicked" : self.on_quit}
        self.signal_autoconnect(self.event_dict)
        # Device tab setup
        self.device_vbox_left = self.get_widget("device_vbox_left")
        self.device_vbox_right = self.get_widget("device_vbox_right")
        self.driver_params = self.jack.get_driver_param_names()
        for driver_param in self.driver_params:
            typestr = self.jack.get_driver_param_type(driver_param)
            isset, default, value = self.jack.get_driver_param_value(driver_param)
            short_descr = self.jack.get_driver_short_description(driver_param)
            long_descr = self.jack.get_driver_long_description(driver_param)
            if typestr == "bool":
                param_widget = self.make_checkbox(driver_param, value)
                self.device_vbox_left.pack_start(param_widget, False)
            elif typestr == "str":
                param_widget = self.make_textentry(driver_param, value)
                self.device_vbox_right.pack_start(param_widget, False)
            elif typestr == "uint" or typestr == "sint":
                param_widget = self.make_spinbutton(driver_param, value)
                self.device_vbox_right.pack_start(param_widget, False)
                
        #Engine tab setup
        self.engine_vbox_left = self.get_widget("engine_vbox_left")
        self.engine_vbox_right = self.get_widget("engine_vbox_right")
        self.engine_params = self.jack.get_engine_param_names()
        for engine_param in self.engine_params:
            typestr = self.jack.get_engine_param_type(engine_param)
            value = self.jack.get_engine_param_value(engine_param)
            descr = self.jack.get_engine_short_description(engine_param)
            if typestr == "bool":
                param_widget = self.make_checkbox(engine_param, value)
                self.engine_vbox_left.pack_start(param_widget, False)
            elif typestr == "str":
                param_widget = self.make_textentry(engine_param, value)
                self.engine_vbox_right.pack_start(param_widget, False)
            elif typestr == "uint" or typestr == "sint":
                param_widget = self.make_spinbutton(engine_param, value)
                self.engine_vbox_right.pack_start(param_widget, False)
    
    def make_checkbox(self, label, value):
        param_widget = gtk.CheckButton(label)
        param_widget.set_active(value)
        param_widget.show()
        return param_widget
    
    def make_spinbutton(self, label, value):
        param_spinbox = gtk.SpinButton()
        param_label = gtk.Label(label)
        param_label.set_alignment(1, 0.5)
        param_label.set_padding(10, 0)
        param_widget = gtk.HBox()
        param_widget.set_homogeneous(True)
        param_widget.pack_start(param_label)
        param_widget.pack_start(param_spinbox)
        param_spinbox.set_value(value)
        param_widget.show_all()
        return param_widget

    def make_textentry(self, label, value):
        param_entry = gtk.Entry()
        param_label = gtk.Label(label)
        param_label.set_alignment(1, 0.5)
        param_label.set_padding(10, 0)
        param_widget = gtk.HBox()
        param_widget.set_homogeneous(True)
        param_widget.pack_start(param_label)
        param_widget.pack_start(param_entry)
        param_entry.set_text(value)
        param_widget.show_all()
        return param_widget

    def on_quit(self, data=None):
        gtk.main_quit()

    def run(self):
        gtk.main()
        return 0

jackctl_conf().run()