#!/usr/bin/python
# LADITools - Linux Audio Desktop Integration Tools
# laditray - System tray integration for LADI
# Copyright (C) 2012 Alessio Treglia <quadrispro@ubuntu.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import signal
import gettext
import argparse

sig_handler = signal.getsignal(signal.SIGTERM)
signal.signal(signal.SIGINT, sig_handler)

from laditools import _gettext_domain
gettext.install(_gettext_domain)

from laditools import get_version_string
from laditools import LadiConfiguration

from gi.repository import Gtk
from gi.repository import GdkPixbuf
from gi.repository import GObject
from laditools.gtk import LadiManager
from laditools.gtk import find_data_file

timeout_add = GObject.timeout_add

class LadiPlayer(LadiManager):

    # Default configuration
    _default_config = {
        'autostart' : False,
    }

    def on_about(self, *args):
        logo_pixbuf = GdkPixbuf.Pixbuf.new_from_file(find_data_file("laditools_logo.svg"))
        copyright_str = u"""Copyright \xa9 2011-2012 Alessio Treglia <quadrispro@ubuntu.com>
Copyright \xa9 2007-2010 Marc-Olivier Barre <marco@marcochapeau.org>
Copyright \xa9 2007-2010 Nedko Arnaudov <nedko@arnaudov.name>"""
        ad = Gtk.AboutDialog.new()
        ad.set_program_name("LADITools")
        ad.set_comments(_("LADITools is a set of tools aiming to achieve the goals of the LADI project to improve desktop integration and user workflow of Linux audio system based on JACK and ladish."))
        ad.set_logo(logo_pixbuf)
        ad.set_authors(["Marc-Olivier Barre", "Nedko Arnaudov", "Alessio Treglia"])
        ad.set_copyright(copyright_str)
        ad.set_version(get_version_string())
        ad.set_license_type( Gtk.License.GPL_3_0)
        ad.set_translator_credits(_("translator-credits"))
        ad.set_website("https://launchpad.net/laditools/")
        ad.run()
        ad.destroy()

    def on_quit(self, *args, **kwargs):
        Gtk.main_quit()

    def _run_select_studio_dialog(self, title, *args):
        studio_list = self.get_ladish_controller().studio_list()
        if not studio_list:
            dlg = Gtk.MessageDialog(None,Gtk.DialogFlags.MODAL | Gtk.DialogFlags.DESTROY_WITH_PARENT,
                                        Gtk.MessageType.INFO,
                                        Gtk.ButtonsType.CLOSE,
                                        _('No studio is available.'))
            dlg.set_title(title)
            dlg.run()
            dlg.destroy()
            return None
        dlg = Gtk.Dialog()
        treeview = Gtk.TreeView()

        dlg.set_title(title)
        dlg.get_content_area().pack_start(child=treeview,
                                         expand=True,
                                         fill=True,
                                         padding=10)
        model = Gtk.ListStore(GObject.TYPE_STRING)
        renderer = Gtk.CellRendererText()
        column = Gtk.TreeViewColumn('Available studios', renderer, text=0)

        dlg.set_title(title)
        dlg.add_button(Gtk.STOCK_OK, Gtk.ResponseType.OK)
        dlg.add_button(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL)
        treeview.set_model(model)
        treeview.append_column(column)
        treeview.set_cursor(Gtk.TreePath(path=0),
                                    focus_column=column,
                                    start_editing=False)
        for studio in studio_list:
            model.append((studio,))

        dlg.show_all()
        response = dlg.run()
        ret = None
        if response == Gtk.ResponseType.OK:
            path, column = treeview.get_cursor()
            ret = model[path][0]
        dlg.hide()
        return ret

    def _toolbuttons_set_active(self, group, **kwargs):
        buttons = getattr(self, "%s_status_buttons" % group)
        if 'all' in kwargs:
            status = kwargs['all']
            for button in buttons:
                buttons[button].set_sensitive(status)
        else:
            for button in kwargs:
                buttons[button].set_sensitive(kwargs[button])

    def ladish_toolbuttons_set_active(self, **kwargs): self._toolbuttons_set_active('ladish', **kwargs)
    def jack_toolbuttons_set_active(self, **kwargs): self._toolbuttons_set_active('jack', **kwargs)
    def a2j_toolbuttons_set_active(self, **kwargs): self._toolbuttons_set_active('a2j', **kwargs)

    def ladish_status_buttons_update(self):
        buttons = self.ladish_status_buttons

        # Setup ladish controls
        if self.ladish_is_available():
            # Buttons "rename" and "unload"
            if self.studio_is_loaded():
                self.ladish_toolbuttons_set_active(unload=True, rename=True)
                # Buttons "start" and "stop"
                if self.studio_is_started():
                    self.ladish_toolbuttons_set_active(start=False, stop=True, save=True)
                else:
                    self.ladish_toolbuttons_set_active(start=True, stop=False, save=False)
                    buttons['start'].set_tooltip(_('Start the loaded studio'))
            else:
                self.ladish_toolbuttons_set_active(start=True,
                                             stop=False,
                                             save=False,
                                             unload=False,
                                             rename=False)
                buttons['start'].set_tooltip(_('Start automatic studio'))
        else:
            self.ladish_toolbuttons_set_active(ladish_all=False)

    def jack_status_buttons_update(self):
        if not self.jack_is_available():
            return

        buttons = self.jack_status_buttons
        ladish_available = self.ladish_is_available()
        jack_started = self.jack_is_started()

        if jack_started:
            self.jack_toolbuttons_set_active(jack_start=False,
                                             jack_stop=(not ladish_available),
                                             jack_reset_xruns=True,
                                             jack_reactivate=True)
        else:
            self.jack_toolbuttons_set_active(jack_start=True,
                                             jack_stop=False,
                                             jack_reset_xruns=False,
                                             jack_reactivate=True)


    def a2j_status_buttons_update(self):
        if not self.a2j_is_available():
            self.a2j_toolbuttons_set_active(all=False)
            return

        buttons = self.a2j_status_buttons
        ladish_available = self.ladish_is_available()
        a2j_started = self.a2j_is_started()

        if not ladish_available:
            if a2j_started:
                self.a2j_toolbuttons_set_active(a2j_start=False,
                                                a2j_stop=True,
                                                a2j_reactivate=True)
            else:
                self.a2j_toolbuttons_set_active(a2j_start=True,
                                                a2j_stop=False,
                                                a2j_reactivate=True)
        else:
            self.a2j_toolbuttons_set_active(a2j_start=False,
                                            a2j_stop=False,
                                            a2j_reactivate=True)

    def update_status_buttons(self):

        # Update widgets
        self.ladish_status_buttons_update()
        self.jack_status_buttons_update()
        self.a2j_status_buttons_update()

        # Update status label
        if self.jack_is_started():
            if self.jack_is_realtime():
                status_text = "RT | "
            else:
                status_text = ""
            # Get DSP Load
            status_text += str (round (float (self.jack_get_load()),1)) + "% | "
            # Get Xruns
            status_text += str (self.jack_get_xruns())
            # Set a started status
            self.status_label.set_label (status_text)
        else:
            self.status_label.set_label(_('<i>JACK is not running</i>'))

    def update(self, *args):
        self.update_status_buttons()
        return True
        try:
            self.update_status_buttons()
        except Exception, err:
            print "Ouch!", err
            raise err
        return True

    def action_ladish_new(self, action, *args):
        self.studio_new()

    def action_ladish_start(self, action, *args):
        if self.studio_is_loaded():
            if not self.studio_is_started():
                self.studio_start()
                self.update_status_buttons()
        else:
            self.jack_start()
            self.update_status_buttons()

    def action_ladish_save(self, action, *args):
        self.studio_save()

    def action_ladish_stop(self, action, *args):
        if self.jack_is_started() and self.studio_is_started():
            self.studio_stop()
            self.update_status_buttons()

    def action_ladish_rename(self, action, *args):
        self.studio_rename()
        self.update_status_buttons()

    def action_ladish_load(self, action, *args):
        selection = self._run_select_studio_dialog(_('Load studio'))
        if selection:
            self.studio_load(None, None, selection)
        return selection

    def action_ladish_delete(self, action, *args):
        selection = self._run_select_studio_dialog(_('Delete studio'))
        if selection:
            self.studio_delete(None, None, selection)
        return selection

    def action_ladish_unload(self, action, *args):
        if self.studio_is_loaded():
            self.studio_unload()
            self.update_status_buttons()

    def action_ladish_reactivate(self, action, *args):
        self.ladish_reactivate()

    def action_jack_start(self, action, *args):
        self.jack_start()
    def action_jack_stop(self, action, *args):
        self.jack_stop()
    def action_jack_reset_xruns(self, action, *args):
        self.jack_reset_xruns()
    def action_jack_reactivate(self, action, *args):
        self.jack_reactivate()

    def action_a2j_start(self, action, *args):
        self.a2j_start()
    def action_a2j_stop(self, action, *args):
        self.a2j_stop()
    def action_a2j_reactivate(self, action, *args):
        self.a2j_reactivate()

    def __init__(self):
        # Handle the configuration
        self.global_config = LadiConfiguration(laditray = self._default_config)
        self.ladiplayer_param_dict = self.global_config.get_config_section ('ladiplayer')
        #autostart = bool(eval(self.ladiplayer_param_dict['autostart']))

        LadiManager.__init__(self, self.global_config.get_config_section ('ladiplayer'), False)

        # Build the UI
        builder = Gtk.Builder()
        ui_path = find_data_file("ladiplayer.ui")
        builder.add_from_file(ui_path)
        sys.stderr.write( _("Loading interface from %s\n") % ui_path)
        sys.stderr.flush()

        # Retrieve objects
        self.ui = ui = builder.get_object("main_window")
        actiongroup_ladish = builder.get_object("actiongroup_ladish")
        actiongroup_jack = builder.get_object("actiongroup_jack")
        actiongroup_a2j = builder.get_object("actiongroup_a2j")
        self.status_label = builder.get_object('toolbutton_label_status')

        # Setup status buttons
        self.ladish_status_buttons = ladish_status_buttons = {}
        self.jack_status_buttons = jack_status_buttons = {}
        self.a2j_status_buttons = a2j_status_buttons = {}

        for action in actiongroup_ladish.list_actions():
            ladish_status_buttons[action.get_name()] = action
        for action in actiongroup_jack.list_actions():
            jack_status_buttons[action.get_name()] = action
        for action in actiongroup_a2j.list_actions():
            a2j_status_buttons[action.get_name()] = action

        # Get the initial status
        self.update ()
        # Add the auto update callback
        self.auto_updater = timeout_add (250, self.update, None)

        builder.connect_signals(self)

    def run(self):
        self.ui.show_all()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=_('graphical front-end that allows users to start, stop and'
                                                    'monitor JACK, as well as start some JACK related applications'),
                                     epilog=_('This program is part of the LADITools suite.'))
    parser.add_argument('--version', action='version', version="%(prog)s " + get_version_string())

    parser.parse_args()
    GObject.threads_init()

    LadiPlayer().run()
    Gtk.main()
    sys.exit(0)
