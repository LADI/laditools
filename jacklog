#!/usr/bin/env python

# pyjackctl - The python jackdbus controller suite
# jackctl_logview - A log viewer for the python JACK dbus suite
# Copyright (C) 2007-2008, Marc-Olivier Barre and Nedko Arnaudov.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from os import environ, sep, path
import sys

try:
    from gobject import timeout_add
    import pygtk
    pygtk.require ('2.0')
    import gtk
    import gtk.glade
    import vte
    import pyjackctl
except:
    error = gtk.MessageDialog (None, gtk.DIALOG_MODAL, gtk.MESSAGE_ERROR, gtk.BUTTONS_OK, "Wow dude...\n\nYou really need to get you dependencies right before you run this program. Ask your package maintainer why he didn't do his job properly")
    error.run ()
    exit (1)

# Default configuration
jackdbus_log_default = environ['HOME'] + sep + ".log" + sep + "jack" + sep + "jackdbus.log"
lash_log_default = environ['HOME'] + sep + ".log" + sep + "lash" + sep + "lash.log"
max_lines_default = 100

class ladilog (gtk.glade.XML):
    def __init__ (self):
        # Handle the configuration
        self.jacklog_config = pyjackctl.config ()
        self.param_dict = self.jacklog_config.get_as_dict ('ladilog')
        if 'jackdbus_log' not in self.param_dict:
            self.param_dict['jackdbus_log'] = jackdbus_log_default, {}
        if 'lash_log' not in self.param_dict:
            self.param_dict['lash_log'] = lash_log_default, {}
        if 'max_lines' not in self.param_dict:
            self.param_dict['max_lines'] = max_lines_default, {}
        self.jackdbus_log, devnull = self.param_dict['jackdbus_log']
        self.lash_log, devnull = self.param_dict['lash_log']
        max_lines_text, devnull = self.param_dict['max_lines']
        self.max_lines = int (max_lines_text)
        # Load the glade file
        gtk.glade.XML.__init__ (self, "/usr/share/pyjackctl/data/ladilog_ui.glade")
        # Get the ui ready for action
        self.event_dict = {"on_jackctl_ladilog_ui_destroy" : self.on_quit,
            "on_close_button_clicked" : self.on_quit,
            "on_clear_button_clicked" : self.on_clear_text,
            "on_purge_button_clicked" : self.on_purge}
        self.signal_autoconnect (self.event_dict)
        # Create our terminal and display it
        self.jack_term = vte.Terminal ()
        self.lash_term = vte.Terminal ()
        self.jack_tab_label = gtk.Label("JACK")
        self.lash_tab_label = gtk.Label("LASH")
        self.logview_notebook = self.get_widget ("ladilog_notebook")
        self.logview_notebook.append_page (self.jack_term)
        self.logview_notebook.append_page (self.lash_term)
        self.logview_notebook.set_tab_label (self.jack_term, self.jack_tab_label)
        self.logview_notebook.set_tab_label (self.lash_term, self.lash_tab_label)
        self.jack_term.show ()
        self.lash_term.show ()
        # Make it do something...
        self.tail_cmd = ["/usr/bin/tail", "-"+str (self.max_lines)+"f"]
        self.jack_term.fork_command (self.tail_cmd[0], self.tail_cmd + [self.jackdbus_log])
        self.lash_term.fork_command (self.tail_cmd[0], self.tail_cmd + [self.lash_log])

    def on_quit (self, data=None):
        gtk.main_quit ()

    def on_clear_text (self, data=None):
        current_view = self.logview_notebook.get_current_page()
        if (current_view == 0):
            term = self.jack_term
        elif (current_view == 1):
            term = self.lash_term
        term.feed ('\033[2J\033[;f')

    def on_purge (self, data=None):
        current_view = self.logview_notebook.get_current_page()
        if (current_view == 0):
            logfile = self.jackdbus_log
            term = self.jack_term
        elif (current_view == 1):
            logfile = self.lash_log
            term = self.lash_term
        # Opens the file in write anew mode thus clearing the file and close it right away
        open (logfile, "w+")
        term.feed ('\033[2J\033[;f')

    def run (self):
        gtk.main ()
        self.jacklog_config.set_as_dict ('ladilog', self.param_dict)
        return 0

ladilog ().run ()
