#!/usr/bin/env python

# pyjackctl - The python jackdbus controller suite
# jackctl_logview - A log viewer for the python JACK dbus suite
# Copyright (C) 2007, Marc-Olivier Barre and Nedko Arnaudov.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import pygtk
pygtk.require('2.0')
import gtk
import gtk.glade
from gobject import timeout_add
from os import environ, sep

jackdbus_log = environ['HOME'] + sep + ".jackdbus" + sep + "jackdbus.log"

class jackctl_logview(gtk.glade.XML):
	def __init__(self):
		# Load the glade file
		gtk.glade.XML.__init__(self, "/usr/share/pyjackctl/data/jackctl_logview_ui.glade")
		# Get the ui ready for action
		self.event_dict = {"on_jackctl_logview_ui_destroy" : self.on_quit,
			"on_close_button_clicked" : self.on_quit,
			"on_clear_button_clicked" : self.on_clear_text,
			"on_purge_button_clicked" : self.on_purge}
		self.signal_autoconnect(self.event_dict)
		self.log_textview = self.get_widget("log_textview")
		self.text_buffer = self.log_textview.get_buffer()
		self.current_pos = self.text_buffer.create_mark("log_cursor", self.text_buffer.get_end_iter())
		self.text_buffer.connect("changed", self.on_text_change)
		# Add the existing log content
		self.log_file = open(jackdbus_log)
		for line in self.log_file:
			self.text_buffer.insert(self.text_buffer.get_end_iter(), line)
		# Tail the logs output every 250ms
		self.auto_updater = timeout_add(250, self.update)

	def on_quit(self, data=None):
		gtk.main_quit()
	
	def on_clear_text(self, data=None):
		self.text_buffer.set_text("")
	
	def on_purge(self, date=None):
		# Opens the file in write anew mode thus clearing the file and close it right away 
		open(jackdbus_log, "w+")
		self.text_buffer.set_text("")

	def update(self):
		line = self.log_file.readline()
		while line:
			self.text_buffer.insert(self.text_buffer.get_end_iter(), line)
			line = self.log_file.readline()
		self.log_file.seek(self.log_file.tell())
		return True
	
	def on_text_change(self, data=None):
		self.text_buffer.move_mark(self.current_pos, self.text_buffer.get_end_iter())
		self.log_textview.scroll_mark_onscreen(self.current_pos)

	def run(self):
		gtk.main()
		return 0

jackctl_logview().run()